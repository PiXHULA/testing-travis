package com.example.demo.domain;

import lombok.*;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.springframework.format.annotation.DateTimeFormat;


import javax.persistence.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Entity
@Table(name = "packages") //Might be autogenerated with the schema?
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Builder
public final class Package {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long Id;
//    @DateTimeFormat(pattern = "E, dd-MM-yyyy")
//    private LocalDateTime date;
//    private String curator;
//    private String curatorPicture;
//    //@NotBlank(message = "Title should not be blank")
//    private String title;
//    //@NotBlank(message = "Tag should not be blank")
//    private String tag;
//    //@NotBlank(message = "City should not be blank")
//    private String city;
//    //@NotBlank(message = "Description should not be blank")
//    private String description;


    @ManyToMany(cascade = {CascadeType.MERGE, CascadeType.REFRESH}, fetch = FetchType.EAGER)
    @JoinTable(name = "Package_Application",
        joinColumns = @JoinColumn (name ="packages", foreignKey = @ForeignKey (name = "fk_package_application")),
        inverseJoinColumns = @JoinColumn(name = "applications", foreignKey = @ForeignKey(name = "fk_application_package")))
    @OnDelete(action = OnDeleteAction.CASCADE)
    private final Set<Application> applications = new HashSet<>(); //Set? For unique apps

    public void addApplication(Application application) {
        this.applications.add(application);
    }

    public void deleteApplication(Application application) {
        this.applications.remove(application);
        application.getPackages().remove(this);
    }

}
